// Generated by Haxe 4.3.3
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public class SL : global::haxe.lang.HxObject {
		
		public static void Main(){
			global::cs.Boot.init();
			global::haxe.root.SL.main();
		}
		static SL() {
			global::haxe.root.SL.tempArray = null;
		}
		
		
		public SL(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public SL() {
			global::haxe.root.SL.__hx_ctor__SL(this);
		}
		
		
		protected static void __hx_ctor__SL(global::haxe.root.SL __hx_this) {
		}
		
		
		public static global::seedyrng.Random random;
		
		public static global::seedyrng.Random GetRandomInstance() {
			if (( global::haxe.root.SL.random == null )) {
				global::haxe.root.SL.random = new global::seedyrng.Random(default(global::haxe.lang.Null<long>), default(global::seedyrng.GeneratorInterface));
			}
			
			return global::haxe.root.SL.random;
		}
		
		
		public static global::haxe.root.Array<object> tempArray;
		
		public static global::haxe.root.Array<object> GetTempArrayUnsafe() {
			if (( global::haxe.root.SL.tempArray == null )) {
				global::haxe.root.SL.tempArray = new global::haxe.root.Array<object>();
			}
			else {
				global::haxe.root.SL.tempArray.spliceVoid(0, global::haxe.root.SL.tempArray.length);
			}
			
			return global::haxe.root.SL.tempArray;
		}
		
		
		public static void main() {
		}
		
		
		public static int GetPriceReroll(int timeleft, global::GameMeta meta) {
			return ((int) (global::System.Math.Ceiling(((double) (( ((double) (timeleft) ) / (( ((double) (meta.Config.DurationReroll) ) /  - (((global::RewardMeta) (meta.Config.PriceReroll[0]) ).Count)  )) )) ))) );
		}
		
		
		public static int Left(int time, int start, int duration) {
			return ( ( duration + start ) - time );
		}
		
		
		public static global::ProfileData CreateProfile(global::GameMeta meta, int timestamp, global::seedyrng.Random random) {
			global::ProfileData profile = new global::ProfileData();
			profile.Cards = new global::System.Collections.Generic.Dictionary<string, global::CardData>();
			profile.Cooldown = 0;
			profile.CurrentLocation = "28354825";
			profile.Deck = new global::System.Collections.Generic.List<string>();
			profile.Accept = new global::System.Collections.Generic.Dictionary<string, global::GameRequest>();
			profile.OpenedLocations = new global::System.Collections.Generic.List<string>();
			profile.Rid = 0;
			profile.Sid = 0;
			profile.SwipeCount = 0;
			profile.Items = new global::System.Collections.Generic.Dictionary<string, global::ItemData>();
			global::haxe.root.CSExtension.getOrCreate_String_ItemData(profile.Items, "6", ( (( global::SL_CreateProfile_62__Fun.__hx_current != null )) ? (global::SL_CreateProfile_62__Fun.__hx_current) : (global::SL_CreateProfile_62__Fun.__hx_current = ((global::SL_CreateProfile_62__Fun) (new global::SL_CreateProfile_62__Fun()) )) ));
			global::haxe.root.CSExtension.getOrCreate_String_ItemData(profile.Items, "5", ( (( global::SL_CreateProfile_63__Fun.__hx_current != null )) ? (global::SL_CreateProfile_63__Fun.__hx_current) : (global::SL_CreateProfile_63__Fun.__hx_current = ((global::SL_CreateProfile_63__Fun) (new global::SL_CreateProfile_63__Fun()) )) ));
			global::haxe.root.CSExtension.getOrCreate_String_ItemData(profile.Items, "13", ( (( global::SL_CreateProfile_64__Fun.__hx_current != null )) ? (global::SL_CreateProfile_64__Fun.__hx_current) : (global::SL_CreateProfile_64__Fun.__hx_current = ((global::SL_CreateProfile_64__Fun) (new global::SL_CreateProfile_64__Fun()) )) ));
			profile.Skills = new global::System.Collections.Generic.List<string>();
			global::haxe.root.CSExtension.push_String(profile.Skills, null);
			global::haxe.root.CSExtension.push_String(profile.Skills, null);
			global::haxe.root.CSExtension.push_String(profile.Skills, null);
			global::haxe.root.CSExtension.push_String(profile.Skills, null);
			profile.LastChange = timestamp;
			profile.Created = timestamp;
			profile.ActiveQuests = new global::System.Collections.Generic.List<string>();
			profile.Rerolls = 0;
			profile.RewardEvents = new global::System.Collections.Generic.List<global::RewardMeta>();
			profile.QuestEvent = null;
			global::haxe.root.CSExtension.push_String(profile.Deck, "27901213");
			global::haxe.root.SL.CreateLeftRight(global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Cards, global::haxe.root.SL.GetCurrentCard(profile)).Next, meta, profile, random);
			return profile;
		}
		
		
		public static void Change(global::GameRequest request, global::GameMeta meta, global::ProfileData profile, int timestamp, global::GameResponse response) {
			unchecked {
				if (( request.Timestamp > timestamp )) {
					response.Error = "request can\'t be created later than the current time";
					return;
				}
				
				if (( request.Timestamp < profile.LastChange )) {
					response.Error = "request can\'t be created earlier than the last executed request";
					return;
				}
				
				if (( request.Rid != profile.Rid )) {
					response.Error = global::haxe.lang.Runtime.concat("request should have valid rid ", global::haxe.lang.Runtime.toString(profile.Rid));
					return;
				}
				
				profile.RewardEvents = new global::System.Collections.Generic.List<global::RewardMeta>();
				profile.QuestEvent = null;
				switch (request.Type) {
					case 11:
					{
						global::System.Collections.Generic.List<string> deck = profile.Deck;
						if (( global::haxe.root.CSExtension.getCount_String(deck) == 0 )) {
							response.Error = global::haxe.lang.Runtime.concat("error deck is empty ", request.Hash);
							return;
						}
						
						if (( global::haxe.root.SL.GetCurrentCard(profile) != request.Hash )) {
							response.Error = global::haxe.lang.Runtime.concat("error current card ", request.Hash);
							return;
						}
						
						if (( ( request.Id == null ) && (( ( profile.Left != null ) || ( profile.Right != null ) )) )) {
							response.Error = "id should not be empty ";
							return;
						}
						
						if (( ( ( request.Id != null ) && ( profile.Left == null ) ) && ( profile.Right == null ) )) {
							response.Error = global::haxe.lang.Runtime.concat("id should be empty", request.Id);
							return;
						}
						
						if (( ( request.Id != profile.Left ) && (( ( ( profile.Right != null ) && ( request.Id != profile.Right ) ) || ( profile.Right == null ) )) )) {
							response.Error = global::haxe.lang.Runtime.concat("id should match with choice", request.Id);
							return;
						}
						
						global::CardData card = global::haxe.root.CSExtension.getOrCreate_String_CardData(profile.Cards, request.Hash, new global::SL_Change_161__Fun(request));
						card.CT++;
						card.CR++;
						card.Choice = request.Id;
						global::haxe.root.SL.random = global::haxe.root.SL.GetRandomInstance();
						global::haxe.root.SL.random.setStringSeed(global::haxe.root.Std.@string(request.Timestamp));
						global::haxe.root.CSExtension.pop<string>(((global::System.Collections.Generic.List<string>) (deck) ));
						if (( request.Id != null )) {
							global::CardMeta nextCard = global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Cards, request.Id);
							if (( ( nextCard.Type == 0 ) || ( nextCard.Type == 2 ) )) {
								global::haxe.root.CSExtension.push_String(deck, nextCard.Id);
							}
							else if (( nextCard.Type == 1 )) {
								if (( nextCard.Next != null )) {
									global::haxe.root.Array<object> candidates = global::haxe.root.SL.GetTempArrayUnsafe();
									{
										global::TriggerMeta[] _g_arr = nextCard.Next;
										uint _g_idx = ((uint) (0) );
										while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
											_g_idx += ((uint) (1) );
											global::TriggerMeta n = ((global::TriggerMeta) (_g_arr[((int) (((uint) (( _g_idx - 1 )) )) )]) );
											global::CardMeta nc = global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Cards, n.Id);
											if (global::haxe.root.SL.CheckCard(nc, n, meta, profile, global::haxe.root.SL.random)) {
												candidates.push(nc);
											}
											
										}
										
									}
									
									if (( candidates.length > 0 )) {
										global::haxe.root.CSExtension.push_String(deck, ((global::CardMeta) (candidates[global::haxe.root.SL.random.randomInt(0, ( candidates.length - 1 ))]) ).Id);
									}
									
								}
								
								global::haxe.root.SL.ApplyReward(nextCard.Reward, meta, profile, global::haxe.root.SL.random);
							}
							
							global::haxe.root.SL.RecursiveOver(nextCard, deck, meta, profile, global::haxe.root.SL.random);
						}
						
						global::CardMeta swipedCard = global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Cards, request.Hash);
						if (( ( swipedCard.Type == 0 ) && ( global::haxe.root.CSExtension.getCount_String(profile.ActiveQuests) > 0 ) )) {
							global::System.Collections.Generic.List<string> rem = new global::System.Collections.Generic.List<string>();
							{
								object qID = global::haxe.root.CSExtension.iterator<string>(((global::System.Collections.Generic.IEnumerable<string>) (profile.ActiveQuests) ));
								while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(qID, "hasNext", 407283053, null))) {
									string qID1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.callField(qID, "next", 1224901875, null));
									global::CardMeta qm = global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Cards, qID1);
									if (( (( ( qm.ST == null ) || ( ( qm.ST != null ) && (( ( ((global::TriggerMeta) (qm.ST[0]) ).Type == 10 ) || ( global::haxe.root.CSExtension.find_TriggerMeta(qm.ST, new global::SL_Change_202__Fun(swipedCard)) != null ) )) ) )) && global::haxe.root.SL.CheckCondition(qm.SC, meta, profile, global::haxe.root.SL.random) )) {
										global::CardData qp = global::haxe.root.CSExtension.tryGet_String_CardData(profile.Cards, qID1);
										qp.Value = 1;
										global::haxe.root.CSExtension.push_String(rem, qID1);
										global::haxe.root.CSExtension.push_String(deck, qID1);
									}
									
								}
								
							}
							
							{
								object qID2 = global::haxe.root.CSExtension.iterator<string>(((global::System.Collections.Generic.IEnumerable<string>) (rem) ));
								while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(qID2, "hasNext", 407283053, null))) {
									string qID3 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.callField(qID2, "next", 1224901875, null));
									global::haxe.root.CSExtension.removeItem_String(profile.ActiveQuests, qID3);
								}
								
							}
							
						}
						
						profile.Left = null;
						profile.Right = null;
						while (( global::haxe.root.CSExtension.getCount_String(profile.Deck) > 0 )) {
							global::CardMeta nextCard1 = global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Cards, global::haxe.root.SL.GetCurrentCard(profile));
							if ( ! (global::haxe.root.SL.CheckNext(nextCard1, null, meta, profile, global::haxe.root.SL.random)) ) {
								global::haxe.root.CSExtension.removeItem_String(profile.Deck, nextCard1.Id);
								continue;
							}
							
							if (nextCard1.Delete) {
								profile.Deck = new global::System.Collections.Generic.List<string>();
								global::haxe.root.CSExtension.push_String(profile.Deck, nextCard1.Id);
							}
							
							global::haxe.root.SL.ApplyReward(nextCard1.Reward, meta, profile, global::haxe.root.SL.random);
							if (( nextCard1.Type == 2 )) {
								global::CardData card1 = global::haxe.root.CSExtension.tryGet_String_CardData(profile.Cards, nextCard1.Id);
								if (( card1 == null )) {
									card1 = new global::CardData(nextCard1.Id);
									card1.Value = 0;
									global::haxe.root.CSExtension.push_String(profile.ActiveQuests, nextCard1.Id);
									global::haxe.root.CSExtension.set_String_CardData(profile.Cards, nextCard1.Id, card1);
								}
								else if (( card1.Value == 1 )) {
									global::haxe.root.SL.ApplyReward(nextCard1.SR, meta, profile, global::haxe.root.SL.random);
								}
								
								profile.QuestEvent = nextCard1.Id;
							}
							else if (( nextCard1.Next != null )) {
								global::TriggerMeta[] next = nextCard1.Next;
								global::haxe.root.SL.CreateLeftRight(next, meta, profile, global::haxe.root.SL.random);
							}
							
							break;
						}
						
						if (( global::haxe.root.CSExtension.getCount_String(profile.Deck) == 0 )) {
							profile.Cooldown = timestamp;
						}
						
						profile.SwipeCount++;
						break;
					}
					
					
					case 12:
					{
						break;
					}
					
					
					case 13:
					{
						if (( request.Hash == null )) {
							response.Error = "an event trigger should have a hash";
							return;
						}
						
						global::System.Collections.Generic.Dictionary<string, global::GameRequest> accepts = profile.Accept;
						global::GameRequest r = global::haxe.root.CSExtension.tryGet_String_GameRequest(accepts, request.Hash);
						if (( r == null )) {
							response.Error = "profile should have an event with the same hash";
							return;
						}
						
						global::System.Collections.Generic.Dictionary<string, global::ItemData> items = profile.Items;
						global::ItemData i = global::haxe.root.CSExtension.getOrCreate_String_ItemData(items, r.Id, new global::SL_Change_317__Fun(r));
						i.Count += r.Value;
						global::haxe.root.CSExtension.remove_String_GameRequest(accepts, request.Hash);
						break;
					}
					
					
					case 14:
					{
						if (( profile.CurrentLocation != request.Id )) {
							response.Error = global::haxe.lang.Runtime.concat("error current location ", request.Id);
							return;
						}
						
						if ( ! (global::haxe.root.CSExtension.contains_String(profile.OpenedLocations, request.Hash)) ) {
							response.Error = global::haxe.lang.Runtime.concat("error next location ", global::haxe.lang.Runtime.toString(request.Value));
							return;
						}
						
						global::CardMeta location = global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Locations, request.Hash);
						profile.CurrentLocation = location.Id;
						break;
					}
					
					
					case 15:
					{
						if (( global::haxe.root.CSExtension.getCount_String(profile.Deck) > 0 )) {
							response.Error = "cards are available";
							return;
						}
						
						if (( profile.Cooldown == 0 )) {
							response.Error = "cooldown should not be 0";
							return;
						}
						
						int left = global::haxe.root.SL.Left(request.Timestamp, profile.Cooldown, meta.Config.DurationReroll);
						int price = ( (( left > 0 )) ? (global::haxe.root.SL.GetPriceReroll(left, meta)) : (0) );
						string id = ((global::RewardMeta) (meta.Config.PriceReroll[0]) ).Id;
						global::ItemData i1 = global::haxe.root.CSExtension.getOrCreate_String_ItemData(profile.Items, id, new global::SL_Change_278__Fun(id));
						if (( i1.Count < price )) {
							response.Error = "not enough items for reroll";
							return;
						}
						
						i1.Count -= price;
						i1.Count = ( (( i1.Count < 0 )) ? (0) : (i1.Count) );
						global::haxe.root.CSExtension.push_String(profile.Deck, ((global::TriggerMeta) (global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Locations, profile.CurrentLocation).Over[0]) ).Id);
						profile.Cooldown = 0;
						profile.Rerolls++;
						global::RewardMeta r1 = ((global::RewardMeta) (global::haxe.root.Type.createEmptyInstance<object>(((global::System.Type) (typeof(global::RewardMeta)) ))) );
						r1.Id = id;
						r1.Type = 2;
						r1.Count =  - (price) ;
						global::haxe.root.CSExtension.push_RewardMeta(profile.RewardEvents, r1);
						{
							object key = global::haxe.root.CSExtension.GetKeys_String_CardData(profile.Cards);
							while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(key, "hasNext", 407283053, null))) {
								string key1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.callField(key, "next", 1224901875, null));
								global::CardData qd = global::haxe.root.CSExtension.tryGet_String_CardData(profile.Cards, key1);
								qd.CR = 0;
							}
							
						}
						
						global::haxe.root.SL.CreateLeftRight(global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Cards, global::haxe.lang.Runtime.toString(profile.Deck[0])).Next, meta, profile, global::haxe.root.SL.random);
						break;
					}
					
					
					default:
					{
						response.Error = "unexpected request";
						return;
					}
					
				}
				
				profile.LastChange = request.Timestamp;
				profile.Rid += 1;
			}
		}
		
		
		public static bool CheckCard(global::CardMeta cardMeta, global::TriggerMeta triggerMeta, global::GameMeta data, global::ProfileData profile, global::seedyrng.Random random) {
			unchecked {
				if (( cardMeta == null )) {
					return false;
				}
				
				if (( ( cardMeta.CT > 0 ) || ( cardMeta.CR > 0 ) )) {
					global::CardData cardData = global::haxe.root.CSExtension.tryGet_String_CardData(profile.Cards, cardMeta.Id);
					if (( ( cardData != null ) && (( ( ( cardMeta.CT != 0 ) && ( cardData.CT >= cardMeta.CT ) ) || ( ( cardMeta.CR != 0 ) && ( cardData.CR >= cardMeta.CR ) ) )) )) {
						return false;
					}
					
				}
				
				if ( ! (global::haxe.root.SL.CheckCondition(cardMeta.Con, data, profile, random)) ) {
					return false;
				}
				
				if (( triggerMeta != null )) {
					if (( ( triggerMeta.Chance > 0 ) && ( random.randomInt(0, 100) > triggerMeta.Chance ) )) {
						return false;
					}
					
				}
				
				if (( ( cardMeta.Next != null ) && ( ( cardMeta.Next as global::System.Array ).Length > 0 ) )) {
					bool f = false;
					{
						global::TriggerMeta[] _g_arr = cardMeta.Next;
						uint _g_idx = ((uint) (0) );
						while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
							_g_idx += ((uint) (1) );
							global::TriggerMeta c = ((global::TriggerMeta) (_g_arr[((int) (((uint) (( _g_idx - 1 )) )) )]) );
							global::CardMeta cm = global::haxe.root.CSExtension.tryGet_String_CardMeta(data.Cards, c.Id);
							if (global::haxe.root.SL.CheckCard(cm, c, data, profile, random)) {
								f = true;
								break;
							}
							
						}
						
					}
					
					if (( f == false )) {
						return false;
					}
					
				}
				
				return true;
			}
		}
		
		
		public static bool CheckNext(global::CardMeta cardMeta, global::TriggerMeta triggerMeta, global::GameMeta data, global::ProfileData profile, global::seedyrng.Random random) {
			unchecked {
				if (( ( cardMeta.Next != null ) && ( ( cardMeta.Next as global::System.Array ).Length > 0 ) )) {
					bool f = false;
					{
						global::TriggerMeta[] _g_arr = cardMeta.Next;
						uint _g_idx = ((uint) (0) );
						while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
							_g_idx += ((uint) (1) );
							global::TriggerMeta c = ((global::TriggerMeta) (_g_arr[((int) (((uint) (( _g_idx - 1 )) )) )]) );
							global::CardMeta cm = global::haxe.root.CSExtension.tryGet_String_CardMeta(data.Cards, c.Id);
							if (global::haxe.root.SL.CheckCard(cm, c, data, profile, random)) {
								f = true;
								break;
							}
							
						}
						
					}
					
					if (( f == false )) {
						return false;
					}
					
				}
				
				return true;
			}
		}
		
		
		public static void RecursiveOver(global::CardMeta nextCard, global::System.Collections.Generic.List<string> deck, global::GameMeta meta, global::ProfileData profile, global::seedyrng.Random random) {
			unchecked {
				if (( nextCard.Over == null )) {
					return;
				}
				
				global::TriggerMeta[] over = nextCard.Over;
				global::haxe.root.Array<object> candidates = global::haxe.root.SL.GetTempArrayUnsafe();
				{
					global::TriggerMeta[] _g_arr = over;
					uint _g_idx = ((uint) (0) );
					while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
						_g_idx += ((uint) (1) );
						global::TriggerMeta o = ((global::TriggerMeta) (_g_arr[((int) (((uint) (( _g_idx - 1 )) )) )]) );
						global::CardMeta oc = global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Cards, o.Id);
						if (( oc.Type == 3 )) {
							global::TriggerMeta[] next = oc.Next;
							global::haxe.root.Array<object> candidates2 = new global::haxe.root.Array<object>();
							{
								global::TriggerMeta[] _g_arr1 = next;
								uint _g_idx1 = ((uint) (0) );
								while (( _g_idx1 < ( _g_arr1 as global::System.Array ).Length )) {
									_g_idx1 += ((uint) (1) );
									global::TriggerMeta n = ((global::TriggerMeta) (_g_arr1[((int) (((uint) (( _g_idx1 - 1 )) )) )]) );
									global::CardMeta oc2 = global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Cards, n.Id);
									if (global::haxe.root.SL.CheckCard(oc2, n, meta, profile, random)) {
										candidates2.push(oc2);
									}
									
								}
								
							}
							
							if (( candidates2.length > 0 )) {
								global::haxe.root.CSExtension.push_String(deck, ((global::CardMeta) (candidates2[random.randomInt(0, ( candidates2.length - 1 ))]) ).Id);
							}
							
						}
						else if (global::haxe.root.SL.CheckCard(oc, o, meta, profile, random)) {
							candidates.push(oc);
						}
						
					}
					
				}
				
				if (( candidates.length > 0 )) {
					global::haxe.root.SL.tempArray = new global::haxe.root.Array<object>();
					candidates.sort(( (( global::SL_RecursiveOver_412__Fun.__hx_current != null )) ? (global::SL_RecursiveOver_412__Fun.__hx_current) : (global::SL_RecursiveOver_412__Fun.__hx_current = ((global::SL_RecursiveOver_412__Fun) (new global::SL_RecursiveOver_412__Fun()) )) ));
					{
						int _g = 0;
						while (( _g < candidates.length )) {
							global::CardMeta c = ((global::CardMeta) (candidates[_g]) );
							 ++ _g;
							global::haxe.root.CSExtension.push_String(deck, c.Id);
							global::haxe.root.SL.tempArray.push(c);
						}
						
					}
					
					{
						int _g1 = 0;
						global::haxe.root.Array<object> _g2 = global::haxe.root.SL.tempArray;
						while (( _g1 < _g2.length )) {
							global::CardMeta c1 = ((global::CardMeta) (_g2[_g1]) );
							 ++ _g1;
							global::haxe.root.SL.RecursiveOver(c1, deck, meta, profile, random);
						}
						
					}
					
				}
				
			}
		}
		
		
		public static bool CheckReward(global::RewardMeta rewardMeta, global::GameMeta data, global::ProfileData profile, global::seedyrng.Random random) {
			unchecked {
				if (( ( rewardMeta.Chance > 0 ) && ( random.randomInt(0, 100) > rewardMeta.Chance ) )) {
					return false;
				}
				
				if ( ! (global::haxe.root.SL.CheckCondition(rewardMeta.Con, data, profile, random)) ) {
					return false;
				}
				
				return true;
			}
		}
		
		
		public static bool CheckCondition(global::ConditionMeta[] con, global::GameMeta data, global::ProfileData profile, global::seedyrng.Random random) {
			unchecked {
				if (( ( con == null ) || ( ( con as global::System.Array ).Length == 0 ) )) {
					return true;
				}
				
				{
					global::ConditionMeta[] _g_arr = con;
					uint _g_idx = ((uint) (0) );
					while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
						_g_idx += ((uint) (1) );
						global::ConditionMeta c = ((global::ConditionMeta) (_g_arr[((int) (((uint) (( _g_idx - 1 )) )) )]) );
						switch (c.Type) {
							case 1:
							{
								global::CardData card = global::haxe.root.CSExtension.tryGet_String_CardData(profile.Cards, c.Id);
								if (( ( card == null ) || ( card.CT < c.Count ) )) {
									return false;
								}
								
								break;
							}
							
							
							case 2:
							{
								global::ItemData item = global::haxe.root.CSExtension.tryGet_String_ItemData(profile.Items, c.Id);
								int count = ( (( item != null )) ? (item.Count) : (0) );
								switch (c.Sign) {
									case "<":
									{
										if (( count >= c.Count )) {
											return false;
										}
										
										break;
									}
									
									
									case "<=":
									{
										if (( count > c.Count )) {
											return false;
										}
										
										break;
									}
									
									
									case "==":
									{
										if (( c.Count != count )) {
											return false;
										}
										
										break;
									}
									
									
									case ">":
									{
										if (( count <= c.Count )) {
											return false;
										}
										
										break;
									}
									
									
									case ">=":
									{
										if (( count < c.Count )) {
											return false;
										}
										
										break;
									}
									
									
									default:
									{
										if (( count == 0 )) {
											return false;
										}
										
										break;
									}
									
								}
								
								break;
							}
							
							
							case 6:
							{
								global::CardMeta card1 = global::haxe.root.CSExtension.tryGet_String_CardMeta(data.Cards, c.Id);
								if (( ( c.Invert == true ) && global::haxe.root.SL.CheckCard(card1, null, data, profile, random) )) {
									return false;
								}
								else if (( ( c.Invert == false ) &&  ! (global::haxe.root.SL.CheckCard(card1, null, data, profile, random))  )) {
									return false;
								}
								
								break;
							}
							
							
							default:
							{
								break;
							}
							
						}
						
					}
					
				}
				
				return true;
			}
		}
		
		
		public static void ApplyReward(global::RewardMeta[] reward, global::GameMeta meta, global::ProfileData profile, global::seedyrng.Random random) {
			unchecked {
				if (( reward == null )) {
					return;
				}
				
				{
					global::RewardMeta[] _g_arr = reward;
					uint _g_idx = ((uint) (0) );
					while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
						_g_idx += ((uint) (1) );
						global::RewardMeta r = ((global::RewardMeta) (_g_arr[((int) (((uint) (( _g_idx - 1 )) )) )]) );
						if ( ! (global::haxe.root.SL.CheckReward(r, meta, profile, random)) ) {
							continue;
						}
						
						switch (r.Type) {
							case 2:
							{
								global::ItemData i = global::haxe.root.CSExtension.getOrCreate_String_ItemData(profile.Items, r.Id, new global::SL_ApplyReward_476__Fun(r));
								i.Count += r.Count;
								i.Count = ( (( i.Count < 0 )) ? (0) : (i.Count) );
								break;
							}
							
							
							case 5:
							{
								global::SkillMeta m = global::haxe.root.CSExtension.tryGet_String_SkillMeta(meta.Skills, r.Id);
								profile.Skills[m.Slot] = r.Id;
								break;
							}
							
							
						}
						
						global::haxe.root.CSExtension.push_RewardMeta(profile.RewardEvents, r);
					}
					
				}
				
			}
		}
		
		
		public static string GetCurrentCard(global::ProfileData profile) {
			unchecked {
				return global::haxe.lang.Runtime.toString(profile.Deck[( global::haxe.root.CSExtension.getCount_String(profile.Deck) - 1 )]);
			}
		}
		
		
		public static void CreateLeftRight(global::TriggerMeta[] next, global::GameMeta meta, global::ProfileData profile, global::seedyrng.Random random) {
			unchecked {
				global::haxe.root.Array<object> candidates = global::haxe.root.SL.GetTempArrayUnsafe();
				{
					global::TriggerMeta[] _g_arr = next;
					uint _g_idx = ((uint) (0) );
					while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
						_g_idx += ((uint) (1) );
						global::TriggerMeta n = ((global::TriggerMeta) (_g_arr[((int) (((uint) (( _g_idx - 1 )) )) )]) );
						global::CardMeta nc = global::haxe.root.CSExtension.tryGet_String_CardMeta(meta.Cards, n.Id);
						if (global::haxe.root.SL.CheckCard(nc, n, meta, profile, random)) {
							candidates.push(nc);
						}
						
					}
					
				}
				
				if (( candidates.length == 0 )) {
					profile.Left = null;
					profile.Right = null;
					return;
				}
				else if (( candidates.length == 1 )) {
					profile.Left = ((global::CardMeta) (candidates[0]) ).Id;
					profile.Right = null;
					return;
				}
				else if (( candidates.length == 2 )) {
					profile.Left = ((global::CardMeta) (candidates[0]) ).Id;
					profile.Right = ((global::CardMeta) (candidates[1]) ).Id;
					return;
				}
				
				candidates.sort(( (( global::SL_CreateLeftRight_512__Fun.__hx_current != null )) ? (global::SL_CreateLeftRight_512__Fun.__hx_current) : (global::SL_CreateLeftRight_512__Fun.__hx_current = ((global::SL_CreateLeftRight_512__Fun) (new global::SL_CreateLeftRight_512__Fun()) )) ));
				int first = ((global::CardMeta) (candidates[0]) ).Pri;
				global::haxe.root.Array<object> ret = new global::haxe.root.Array<object>(new object[]{});
				{
					int _g = 0;
					int _g1 = candidates.length;
					while (( _g < _g1 )) {
						int i = _g++;
						global::CardMeta elt = ((global::CardMeta) (candidates.__a[i]) );
						if (( elt.Pri == first )) {
							ret.push(elt);
						}
						
					}
					
				}
				
				global::haxe.root.Array<object> filtered = ret;
				if (( filtered.length == 1 )) {
					profile.Left = ((global::CardMeta) (filtered[0]) ).Id;
					candidates.@remove(((global::CardMeta) (filtered[0]) ));
				}
				else {
					global::CardMeta d = ((global::CardMeta) (filtered[random.randomInt(0, ( filtered.length - 1 ))]) );
					profile.Left = d.Id;
					candidates.@remove(d);
				}
				
				candidates.sort(( (( global::SL_CreateLeftRight_523__Fun.__hx_current != null )) ? (global::SL_CreateLeftRight_523__Fun.__hx_current) : (global::SL_CreateLeftRight_523__Fun.__hx_current = ((global::SL_CreateLeftRight_523__Fun) (new global::SL_CreateLeftRight_523__Fun()) )) ));
				int first1 = ((global::CardMeta) (candidates[0]) ).Pri;
				global::haxe.root.Array<object> ret1 = new global::haxe.root.Array<object>(new object[]{});
				{
					int _g2 = 0;
					int _g3 = candidates.length;
					while (( _g2 < _g3 )) {
						int i1 = _g2++;
						global::CardMeta elt1 = ((global::CardMeta) (candidates.__a[i1]) );
						if (( elt1.Pri == first1 )) {
							ret1.push(elt1);
						}
						
					}
					
				}
				
				global::haxe.root.Array<object> filtered1 = ret1;
				if (( filtered1.length == 1 )) {
					profile.Right = ((global::CardMeta) (filtered1[0]) ).Id;
				}
				else {
					profile.Right = ((global::CardMeta) (filtered1[random.randomInt(0, ( filtered1.length - 1 ))]) ).Id;
				}
				
			}
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class SL_CreateProfile_62__Fun : global::haxe.lang.Function {
	
	public SL_CreateProfile_62__Fun() : base(1, 0) {
	}
	
	
	public static global::SL_CreateProfile_62__Fun __hx_current;
	
	public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
		unchecked {
			global::ItemData f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::ItemData) (((object) (__fn_float1) )) )) : (((global::ItemData) (__fn_dyn1) )) );
			return new global::ItemData("6", 998);
		}
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class SL_CreateProfile_63__Fun : global::haxe.lang.Function {
	
	public SL_CreateProfile_63__Fun() : base(1, 0) {
	}
	
	
	public static global::SL_CreateProfile_63__Fun __hx_current;
	
	public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
		unchecked {
			global::ItemData f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::ItemData) (((object) (__fn_float1) )) )) : (((global::ItemData) (__fn_dyn1) )) );
			return new global::ItemData("5", 2);
		}
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class SL_CreateProfile_64__Fun : global::haxe.lang.Function {
	
	public SL_CreateProfile_64__Fun() : base(1, 0) {
	}
	
	
	public static global::SL_CreateProfile_64__Fun __hx_current;
	
	public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
		unchecked {
			global::ItemData f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::ItemData) (((object) (__fn_float1) )) )) : (((global::ItemData) (__fn_dyn1) )) );
			return new global::ItemData("13", 10);
		}
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class SL_Change_161__Fun : global::haxe.lang.Function {
	
	public SL_Change_161__Fun(global::GameRequest request) : base(1, 0) {
		this.request = request;
	}
	
	
	public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
		global::CardData f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::CardData) (((object) (__fn_float1) )) )) : (((global::CardData) (__fn_dyn1) )) );
		return new global::CardData(this.request.Hash);
	}
	
	
	public global::GameRequest request;
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class SL_Change_202__Fun : global::haxe.lang.Function {
	
	public SL_Change_202__Fun(global::CardMeta swipedCard) : base(1, 0) {
		this.swipedCard = swipedCard;
	}
	
	
	public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
		global::TriggerMeta qms = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::TriggerMeta) (((object) (__fn_float1) )) )) : (((global::TriggerMeta) (__fn_dyn1) )) );
		return ( qms.Id == this.swipedCard.Id );
	}
	
	
	public global::CardMeta swipedCard;
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class SL_Change_317__Fun : global::haxe.lang.Function {
	
	public SL_Change_317__Fun(global::GameRequest r) : base(1, 0) {
		this.r = r;
	}
	
	
	public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
		global::ItemData f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::ItemData) (((object) (__fn_float1) )) )) : (((global::ItemData) (__fn_dyn1) )) );
		return new global::ItemData(this.r.Id, 0);
	}
	
	
	public global::GameRequest r;
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class SL_Change_278__Fun : global::haxe.lang.Function {
	
	public SL_Change_278__Fun(string id) : base(1, 0) {
		this.id = id;
	}
	
	
	public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
		global::ItemData t = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::ItemData) (((object) (__fn_float1) )) )) : (((global::ItemData) (__fn_dyn1) )) );
		return new global::ItemData(this.id, 0);
	}
	
	
	public string id;
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class SL_RecursiveOver_412__Fun : global::haxe.lang.Function {
	
	public SL_RecursiveOver_412__Fun() : base(2, 1) {
	}
	
	
	public static global::SL_RecursiveOver_412__Fun __hx_current;
	
	public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
		global::CardMeta b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::CardMeta) (((object) (__fn_float2) )) )) : (((global::CardMeta) (__fn_dyn2) )) );
		global::CardMeta a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::CardMeta) (((object) (__fn_float1) )) )) : (((global::CardMeta) (__fn_dyn1) )) );
		return ((double) (( a.Pri - b.Pri )) );
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class SL_ApplyReward_476__Fun : global::haxe.lang.Function {
	
	public SL_ApplyReward_476__Fun(global::RewardMeta r) : base(1, 0) {
		this.r = r;
	}
	
	
	public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
		global::ItemData f = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::ItemData) (((object) (__fn_float1) )) )) : (((global::ItemData) (__fn_dyn1) )) );
		return new global::ItemData(this.r.Id, 0);
	}
	
	
	public global::RewardMeta r;
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class SL_CreateLeftRight_512__Fun : global::haxe.lang.Function {
	
	public SL_CreateLeftRight_512__Fun() : base(2, 1) {
	}
	
	
	public static global::SL_CreateLeftRight_512__Fun __hx_current;
	
	public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
		global::CardMeta b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::CardMeta) (((object) (__fn_float2) )) )) : (((global::CardMeta) (__fn_dyn2) )) );
		global::CardMeta a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::CardMeta) (((object) (__fn_float1) )) )) : (((global::CardMeta) (__fn_dyn1) )) );
		return ((double) (( b.Pri - a.Pri )) );
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class SL_CreateLeftRight_523__Fun : global::haxe.lang.Function {
	
	public SL_CreateLeftRight_523__Fun() : base(2, 1) {
	}
	
	
	public static global::SL_CreateLeftRight_523__Fun __hx_current;
	
	public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
		global::CardMeta b = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (((global::CardMeta) (((object) (__fn_float2) )) )) : (((global::CardMeta) (__fn_dyn2) )) );
		global::CardMeta a = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::CardMeta) (((object) (__fn_float1) )) )) : (((global::CardMeta) (__fn_dyn1) )) );
		return ((double) (( b.Pri - a.Pri )) );
	}
	
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public class CSExtension : global::haxe.lang.HxObject {
		
		public CSExtension(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public CSExtension() {
			global::haxe.root.CSExtension.__hx_ctor__CSExtension(this);
		}
		
		
		protected static void __hx_ctor__CSExtension(global::haxe.root.CSExtension __hx_this) {
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static bool remove_String_GameRequest(global::System.Collections.Generic.Dictionary<string, global::GameRequest> _this, string key) {
			return _this.Remove(((string) (key) ));
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::GameRequest tryGet_String_GameRequest(global::System.Collections.Generic.Dictionary<string, global::GameRequest> _this, string key) {
			global::GameRequest i = null;
			if (_this.TryGetValue(((string) (key) ), out i)) {
				return i;
			}
			
			return null;
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static object GetKeys_String_CardData(global::System.Collections.Generic.Dictionary<string, global::CardData> _this) {
			return global::haxe.root.CSExtension.iterator<string>(((global::System.Collections.Generic.IEnumerable<string>) (_this.Keys) ));
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static void set_String_CardData(global::System.Collections.Generic.Dictionary<string, global::CardData> _this, string key, global::CardData @value) {
			_this[((string) (key) )] = ((global::CardData) (@value) );
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static void removeItem_String(global::System.Collections.Generic.List<string> _this, string x) {
			_this.Remove(((string) (x) ));
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::TriggerMeta find_TriggerMeta(global::TriggerMeta[] _this, global::haxe.lang.Function f) {
			unchecked {
				{
					global::TriggerMeta[] _g_arr = _this;
					uint _g_idx = ((uint) (0) );
					while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
						_g_idx += ((uint) (1) );
						global::TriggerMeta c = ((global::TriggerMeta) (_g_arr[((int) (((uint) (( _g_idx - 1 )) )) )]) );
						if (global::haxe.lang.Runtime.toBool(f.__hx_invoke1_o(default(double), c))) {
							return c;
						}
						
					}
					
				}
				
				return null;
			}
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static void push_RewardMeta(global::System.Collections.Generic.List<global::RewardMeta> _this, global::RewardMeta x) {
			_this.Add(((global::RewardMeta) (x) ));
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::SkillMeta tryGet_String_SkillMeta(global::System.Collections.Generic.Dictionary<string, global::SkillMeta> _this, string key) {
			global::SkillMeta i = null;
			if (_this.TryGetValue(((string) (key) ), out i)) {
				return i;
			}
			
			return null;
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::CardData getOrCreate_String_CardData(global::System.Collections.Generic.Dictionary<string, global::CardData> _this, string key, global::haxe.lang.Function f) {
			global::CardData i = null;
			if ( ! (_this.TryGetValue(((string) (key) ), out i)) ) {
				i = ((global::CardData) (f.__hx_invoke1_o(default(double), i)) );
				_this[((string) (key) )] = ((global::CardData) (i) );
			}
			
			return i;
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static bool contains_String(global::System.Collections.Generic.List<string> _this, string x) {
			return _this.Contains(((string) (x) ));
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static int getCount_String(global::System.Collections.Generic.List<string> _this) {
			return _this.Count;
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::ItemData tryGet_String_ItemData(global::System.Collections.Generic.Dictionary<string, global::ItemData> _this, string key) {
			global::ItemData i = null;
			if (_this.TryGetValue(((string) (key) ), out i)) {
				return i;
			}
			
			return null;
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::CardData tryGet_String_CardData(global::System.Collections.Generic.Dictionary<string, global::CardData> _this, string key) {
			global::CardData i = null;
			if (_this.TryGetValue(((string) (key) ), out i)) {
				return i;
			}
			
			return null;
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::CardMeta tryGet_String_CardMeta(global::System.Collections.Generic.Dictionary<string, global::CardMeta> _this, string key) {
			global::CardMeta i = null;
			if (_this.TryGetValue(((string) (key) ), out i)) {
				return i;
			}
			
			return null;
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static void push_String(global::System.Collections.Generic.List<string> _this, string x) {
			_this.Add(((string) (x) ));
		}
		
		
		[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
		public static global::ItemData getOrCreate_String_ItemData(global::System.Collections.Generic.Dictionary<string, global::ItemData> _this, string key, global::haxe.lang.Function f) {
			global::ItemData i = null;
			if ( ! (_this.TryGetValue(((string) (key) ), out i)) ) {
				i = ((global::ItemData) (f.__hx_invoke1_o(default(double), i)) );
				_this[((string) (key) )] = ((global::ItemData) (i) );
			}
			
			return i;
		}
		
		
		public static object iterator<T>(global::System.Collections.Generic.IEnumerable<T> hashSet) {
			return new global::haxe.root.IEnumerableIterator<T>(((global::System.Collections.Generic.IEnumerable<T>) (hashSet) ));
		}
		
		
		public static T pop<T>(global::System.Collections.Generic.List<T> _this) {
			unchecked {
				T i = global::haxe.lang.Runtime.genericCast<T>(_this[0]);
				_this.RemoveAt(((int) (( _this.Count - 1 )) ));
				return i;
			}
		}
		
		
		public static void sort<T>(global::System.Collections.Generic.List<T> _this, global::haxe.lang.Function f) {
			_this.Sort(((global::System.Comparison<T>) (new global::CSExtension_sort_575__Fun<T>(f).Delegate) ));
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class CSExtension_sort_575__Fun<T> : global::haxe.lang.Function {
	
	public CSExtension_sort_575__Fun(global::haxe.lang.Function f) : base(2, 1) {
		this.f = f;
	}
	
	
	public override double __hx_invoke2_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2) {
		T arg1 = ( (( __fn_dyn2 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float2) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn2)) );
		T arg0 = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (global::haxe.lang.Runtime.genericCast<T>(((object) (__fn_float1) ))) : (global::haxe.lang.Runtime.genericCast<T>(__fn_dyn1)) );
		return ((double) (this.Delegate(arg0, arg1)) );
	}
	
	
	public int Delegate(T arg0, T arg1) {
		return ((int) (this.f.__hx_invoke2_f(default(double), arg0, default(double), arg1)) );
	}
	
	
	public global::haxe.lang.Function f;
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public class IEnumerableIterator<T> : global::haxe.lang.HxObject {
		
		public IEnumerableIterator(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public IEnumerableIterator(global::System.Collections.Generic.IEnumerable<T> enumerable) {
			global::haxe.root.IEnumerableIterator<object>.__hx_ctor__IEnumerableIterator<T>(((global::haxe.root.IEnumerableIterator<T>) (this) ), ((global::System.Collections.Generic.IEnumerable<T>) (enumerable) ));
		}
		
		
		protected static void __hx_ctor__IEnumerableIterator<T_c>(global::haxe.root.IEnumerableIterator<T_c> __hx_this, global::System.Collections.Generic.IEnumerable<T_c> enumerable) {
			__hx_this.nextCalled = false;
			__hx_this.hasNextBool = false;
			{
				__hx_this.enumerator = ((global::System.Collections.Generic.IEnumerator<T_c>) (( enumerable as global::System.Collections.IEnumerable ).GetEnumerator()) );
			}
			
		}
		
		
		public global::System.Collections.Generic.IEnumerator<T> enumerator;
		
		public bool hasNextBool;
		
		public bool nextCalled;
		
		public virtual bool hasNext() {
			if ( ! (this.nextCalled) ) {
				this.hasNextBool = ( this.enumerator as global::System.Collections.IEnumerator ).MoveNext();
				this.nextCalled = true;
			}
			
			return this.hasNextBool;
		}
		
		
		public virtual T next() {
			this.hasNext();
			this.nextCalled = false;
			return global::haxe.lang.Runtime.genericCast<T>(( this.enumerator as global::System.Collections.IEnumerator ).Current);
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1813644752:
					{
						this.nextCalled = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1067388983:
					{
						this.hasNextBool = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 536726916:
					{
						this.enumerator = ((global::System.Collections.Generic.IEnumerator<T>) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1224901875:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 407283053:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "hasNext", 407283053)) );
					}
					
					
					case 1813644752:
					{
						return this.nextCalled;
					}
					
					
					case 1067388983:
					{
						return this.hasNextBool;
					}
					
					
					case 536726916:
					{
						return this.enumerator;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1224901875:
					{
						return this.next();
					}
					
					
					case 407283053:
					{
						return this.hasNext();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array<string> baseArr) {
			baseArr.push("nextCalled");
			baseArr.push("hasNextBool");
			baseArr.push("enumerator");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


