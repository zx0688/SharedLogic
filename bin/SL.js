// Generated by Haxe 4.3.3
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ProfileData = function() {
};
ProfileData.__name__ = true;
ProfileData.prototype = {
	__class__: ProfileData
};
var CardData = function(Id) {
	this.Id = Id;
	this.CT = 0;
	this.CR = 0;
	this.Choice = null;
	this.Value = 0;
};
CardData.__name__ = true;
CardData.prototype = {
	__class__: CardData
};
var ItemData = function(Id,Count) {
	this.Id = Id;
	this.Count = Count;
};
ItemData.__name__ = true;
ItemData.prototype = {
	__class__: ItemData
};
var GameRequest = function(Type1,Value,Id) {
	if(Id == null) {
		Id = "";
	}
	if(Value == null) {
		Value = 0;
	}
	this.Id = Id;
	this.Type = Type1;
	this.Value = Value;
};
GameRequest.__name__ = true;
GameRequest.prototype = {
	__class__: GameRequest
};
var GameResponse = function() { };
GameResponse.__name__ = true;
GameResponse.prototype = {
	__class__: GameResponse
};
var GameMeta = function() { };
GameMeta.__name__ = true;
GameMeta.prototype = {
	__class__: GameMeta
};
var PlayerMeta = function() { };
PlayerMeta.__name__ = true;
PlayerMeta.prototype = {
	__class__: PlayerMeta
};
var ConfigMeta = function() { };
ConfigMeta.__name__ = true;
ConfigMeta.prototype = {
	__class__: ConfigMeta
};
var RewardMeta = function() { };
RewardMeta.__name__ = true;
RewardMeta.prototype = {
	__class__: RewardMeta
};
var ItemMeta = function() { };
ItemMeta.__name__ = true;
ItemMeta.prototype = {
	__class__: ItemMeta
};
var SkillMeta = function() { };
SkillMeta.__name__ = true;
SkillMeta.__super__ = ItemMeta;
SkillMeta.prototype = $extend(ItemMeta.prototype,{
	__class__: SkillMeta
});
var ChoiceMeta = function() { };
ChoiceMeta.__name__ = true;
ChoiceMeta.prototype = {
	__class__: ChoiceMeta
};
var TriggerMeta = function() { };
TriggerMeta.__name__ = true;
TriggerMeta.prototype = {
	__class__: TriggerMeta
};
var ConditionMeta = function() { };
ConditionMeta.__name__ = true;
ConditionMeta.prototype = {
	__class__: ConditionMeta
};
var CardMeta = function() { };
CardMeta.__name__ = true;
CardMeta.prototype = {
	__class__: CardMeta
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Math.__name__ = true;
var SL = function() { };
SL.__name__ = true;
SL.GetRandomInstance = function() {
	if(SL.random == null) {
		SL.random = new seedyrng_Random();
	}
	return SL.random;
};
SL.GetTempArrayUnsafe = function() {
	if(SL.tempArray == null) {
		SL.tempArray = [];
	} else {
		SL.tempArray.splice(0,SL.tempArray.length);
	}
	return SL.tempArray;
};
SL.main = function() {
};
SL.GetPriceReroll = function(timeleft,meta) {
	return Math.ceil(js_Boot.__cast(timeleft , Float) / (meta.Config.DurationReroll / -meta.Config.PriceReroll[0].Count));
};
SL.Left = function(time,start,duration) {
	return duration + start - time;
};
SL.CreateProfile = function(meta,timestamp,random) {
	var profile = new ProfileData();
	profile.Cards = new haxe_ds_StringMap();
	profile.Cooldown = 0;
	profile.CurrentLocation = "28354825";
	profile.Deck = [];
	profile.Accept = new haxe_ds_StringMap();
	profile.OpenedLocations = [];
	profile.Rid = 0;
	profile.Sid = 0;
	profile.SwipeCount = 0;
	profile.Items = new haxe_ds_StringMap();
	CSExtension.getOrCreate_String_ItemData(profile.Items,"6",function(f) {
		return new ItemData("6",998);
	});
	CSExtension.getOrCreate_String_ItemData(profile.Items,"5",function(f) {
		return new ItemData("5",2);
	});
	CSExtension.getOrCreate_String_ItemData(profile.Items,"13",function(f) {
		return new ItemData("13",10);
	});
	profile.Skills = [];
	profile.Skills.push(null);
	profile.Skills.push(null);
	profile.Skills.push(null);
	profile.Skills.push(null);
	profile.LastChange = timestamp;
	profile.Created = timestamp;
	profile.ActiveQuests = [];
	profile.Rerolls = 0;
	profile.RewardEvents = [];
	profile.QuestEvent = null;
	profile.Deck.push("27901213");
	SL.CreateLeftRight(CSExtension.tryGet_String_CardMeta(meta.Cards,SL.GetCurrentCard(profile)).Next,meta,profile,random);
	return profile;
};
SL.Change = function(request,meta,profile,timestamp,response) {
	if(request.Timestamp > timestamp) {
		response.Error = "request can't be created later than the current time";
		return;
	}
	if(request.Timestamp < profile.LastChange) {
		response.Error = "request can't be created earlier than the last executed request";
		return;
	}
	if(request.Rid != profile.Rid) {
		response.Error = "request should have valid rid " + profile.Rid;
		return;
	}
	profile.RewardEvents = [];
	profile.QuestEvent = null;
	switch(request.Type) {
	case 11:
		var deck = profile.Deck;
		if(CSExtension.getCount_String(deck) == 0) {
			response.Error = "error deck is empty " + request.Hash;
			return;
		}
		if(SL.GetCurrentCard(profile) != request.Hash) {
			response.Error = "error current card " + request.Hash;
			return;
		}
		if(request.Id == null && (profile.Left != null || profile.Right != null)) {
			response.Error = "id should not be empty ";
			return;
		}
		if(request.Id != null && profile.Left == null && profile.Right == null) {
			response.Error = "id should be empty" + request.Id;
			return;
		}
		if(request.Id != profile.Left && (profile.Right != null && request.Id != profile.Right || profile.Right == null)) {
			response.Error = "id should match with choice" + request.Id;
			return;
		}
		var card = CSExtension.getOrCreate_String_CardData(profile.Cards,request.Hash,function(f) {
			return new CardData(request.Hash);
		});
		card.CT++;
		card.CR++;
		card.Choice = request.Id;
		SL.random = SL.GetRandomInstance();
		SL.random.setStringSeed(request.Timestamp == null ? "null" : "" + request.Timestamp);
		deck.pop();
		if(request.Id != null) {
			var nextCard = CSExtension.tryGet_String_CardMeta(meta.Cards,request.Id);
			if(nextCard.Type == 0 || nextCard.Type == 2) {
				deck.push(nextCard.Id);
			} else if(nextCard.Type == 1) {
				if(nextCard.Next != null) {
					var candidates = SL.GetTempArrayUnsafe();
					var _g = 0;
					var _g1 = nextCard.Next;
					while(_g < _g1.length) {
						var n = _g1[_g];
						++_g;
						var nc = CSExtension.tryGet_String_CardMeta(meta.Cards,n.Id);
						if(SL.CheckCard(nc,n,meta,profile,SL.random)) {
							candidates.push(nc);
						}
					}
					if(candidates.length > 0) {
						deck.push(candidates[SL.random.randomInt(0,candidates.length - 1)].Id);
					}
				}
				SL.ApplyReward(nextCard.Reward,meta,profile,SL.random);
			}
			SL.RecursiveOver(nextCard,deck,meta,profile,SL.random);
		}
		var swipedCard = CSExtension.tryGet_String_CardMeta(meta.Cards,request.Hash);
		if(swipedCard.Type == 0 && CSExtension.getCount_String(profile.ActiveQuests) > 0) {
			var rem = [];
			var _g = 0;
			var _g1 = profile.ActiveQuests;
			while(_g < _g1.length) {
				var qID = _g1[_g];
				++_g;
				var qm = CSExtension.tryGet_String_CardMeta(meta.Cards,qID);
				if((qm.ST == null || qm.ST != null && (qm.ST[0].Type == 10 || CSExtension.find_TriggerMeta(qm.ST,function(qms) {
					return qms.Id == swipedCard.Id;
				}) != null)) && SL.CheckCondition(qm.SC,meta,profile,SL.random)) {
					var qp = CSExtension.tryGet_String_CardData(profile.Cards,qID);
					qp.Value = 1;
					rem.push(qID);
					deck.push(qID);
				}
			}
			var _g = 0;
			while(_g < rem.length) {
				var qID = rem[_g];
				++_g;
				CSExtension.removeItem_String(profile.ActiveQuests,qID);
			}
		}
		profile.Left = null;
		profile.Right = null;
		while(CSExtension.getCount_String(profile.Deck) > 0) {
			var nextCard = CSExtension.tryGet_String_CardMeta(meta.Cards,SL.GetCurrentCard(profile));
			if(!SL.CheckNext(nextCard,null,meta,profile,SL.random)) {
				CSExtension.removeItem_String(profile.Deck,nextCard.Id);
				continue;
			}
			if(nextCard.Delete) {
				profile.Deck = [];
				profile.Deck.push(nextCard.Id);
			}
			SL.ApplyReward(nextCard.Reward,meta,profile,SL.random);
			if(nextCard.Type == 2) {
				var card = CSExtension.tryGet_String_CardData(profile.Cards,nextCard.Id);
				if(card == null) {
					card = new CardData(nextCard.Id);
					card.Value = 0;
					profile.ActiveQuests.push(nextCard.Id);
					profile.Cards.h[nextCard.Id] = card;
				} else if(card.Value == 1) {
					SL.ApplyReward(nextCard.SR,meta,profile,SL.random);
				}
				profile.QuestEvent = nextCard.Id;
			} else if(nextCard.Next != null) {
				var next = nextCard.Next;
				SL.CreateLeftRight(next,meta,profile,SL.random);
			}
			break;
		}
		if(CSExtension.getCount_String(profile.Deck) == 0) {
			profile.Cooldown = timestamp;
		}
		profile.SwipeCount++;
		break;
	case 12:
		break;
	case 13:
		if(request.Hash == null) {
			response.Error = "an event trigger should have a hash";
			return;
		}
		var accepts = profile.Accept;
		var r = CSExtension.tryGet_String_GameRequest(accepts,request.Hash);
		if(r == null) {
			response.Error = "profile should have an event with the same hash";
			return;
		}
		var items = profile.Items;
		var i = CSExtension.getOrCreate_String_ItemData(items,r.Id,function(f) {
			return new ItemData(r.Id,0);
		});
		i.Count += r.Value;
		var key = request.Hash;
		if(Object.prototype.hasOwnProperty.call(accepts.h,key)) {
			delete(accepts.h[key]);
		}
		break;
	case 14:
		if(profile.CurrentLocation != request.Id) {
			response.Error = "error current location " + request.Id;
			return;
		}
		if(profile.OpenedLocations.indexOf(request.Hash) == -1) {
			response.Error = "error next location " + request.Value;
			return;
		}
		var location = CSExtension.tryGet_String_CardMeta(meta.Locations,request.Hash);
		profile.CurrentLocation = location.Id;
		break;
	case 15:
		if(CSExtension.getCount_String(profile.Deck) > 0) {
			response.Error = "cards are available";
			return;
		}
		if(profile.Cooldown == 0) {
			response.Error = "cooldown should not be 0";
			return;
		}
		var left = SL.Left(request.Timestamp,profile.Cooldown,meta.Config.DurationReroll);
		var price = left > 0 ? SL.GetPriceReroll(left,meta) : 0;
		var id = meta.Config.PriceReroll[0].Id;
		var i = CSExtension.getOrCreate_String_ItemData(profile.Items,id,function(t) {
			return new ItemData(id,0);
		});
		if(i.Count < price) {
			response.Error = "not enough items for reroll";
			return;
		}
		i.Count -= price;
		i.Count = i.Count < 0 ? 0 : i.Count;
		profile.Deck.push(CSExtension.tryGet_String_CardMeta(meta.Locations,profile.CurrentLocation).Over[0].Id);
		profile.Cooldown = 0;
		profile.Rerolls++;
		var r1 = Object.create(RewardMeta.prototype);
		r1.Id = id;
		r1.Type = 2;
		r1.Count = -price;
		profile.RewardEvents.push(r1);
		var key = CSExtension.GetKeys_String_CardData(profile.Cards);
		while(key.hasNext()) {
			var key1 = key.next();
			var qd = CSExtension.tryGet_String_CardData(profile.Cards,key1);
			qd.CR = 0;
		}
		SL.CreateLeftRight(CSExtension.tryGet_String_CardMeta(meta.Cards,profile.Deck[0]).Next,meta,profile,SL.random);
		break;
	default:
		response.Error = "unexpected request";
		return;
	}
	profile.LastChange = request.Timestamp;
	profile.Rid += 1;
};
SL.CheckCard = function(cardMeta,triggerMeta,data,profile,random) {
	if(cardMeta == null) {
		return false;
	}
	if(cardMeta.CT > 0 || cardMeta.CR > 0) {
		var cardData = CSExtension.tryGet_String_CardData(profile.Cards,cardMeta.Id);
		if(cardData != null && (cardMeta.CT != 0 && cardData.CT >= cardMeta.CT || cardMeta.CR != 0 && cardData.CR >= cardMeta.CR)) {
			return false;
		}
	}
	if(!SL.CheckCondition(cardMeta.Con,data,profile,random)) {
		return false;
	}
	if(triggerMeta != null) {
		if(triggerMeta.Chance > 0 && random.randomInt(0,100) > triggerMeta.Chance) {
			return false;
		}
	}
	if(cardMeta.Next != null && cardMeta.Next.length > 0) {
		var f = false;
		var _g = 0;
		var _g1 = cardMeta.Next;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var cm = CSExtension.tryGet_String_CardMeta(data.Cards,c.Id);
			if(SL.CheckCard(cm,c,data,profile,random)) {
				f = true;
				break;
			}
		}
		if(f == false) {
			return false;
		}
	}
	return true;
};
SL.CheckNext = function(cardMeta,triggerMeta,data,profile,random) {
	if(cardMeta.Next != null && cardMeta.Next.length > 0) {
		var f = false;
		var _g = 0;
		var _g1 = cardMeta.Next;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var cm = CSExtension.tryGet_String_CardMeta(data.Cards,c.Id);
			if(SL.CheckCard(cm,c,data,profile,random)) {
				f = true;
				break;
			}
		}
		if(f == false) {
			return false;
		}
	}
	return true;
};
SL.RecursiveOver = function(nextCard,deck,meta,profile,random) {
	if(nextCard.Over == null) {
		return;
	}
	var over = nextCard.Over;
	var candidates = SL.GetTempArrayUnsafe();
	var _g = 0;
	while(_g < over.length) {
		var o = over[_g];
		++_g;
		var oc = CSExtension.tryGet_String_CardMeta(meta.Cards,o.Id);
		if(oc.Type == 3) {
			var next = oc.Next;
			var candidates2 = [];
			var _g1 = 0;
			while(_g1 < next.length) {
				var n = next[_g1];
				++_g1;
				var oc2 = CSExtension.tryGet_String_CardMeta(meta.Cards,n.Id);
				if(SL.CheckCard(oc2,n,meta,profile,random)) {
					candidates2.push(oc2);
				}
			}
			if(candidates2.length > 0) {
				deck.push(candidates2[random.randomInt(0,candidates2.length - 1)].Id);
			}
		} else if(SL.CheckCard(oc,o,meta,profile,random)) {
			candidates.push(oc);
		}
	}
	if(candidates.length > 0) {
		SL.tempArray = [];
		candidates.sort(function(a,b) {
			return a.Pri - b.Pri;
		});
		var _g = 0;
		while(_g < candidates.length) {
			var c = candidates[_g];
			++_g;
			deck.push(c.Id);
			SL.tempArray.push(c);
		}
		var _g = 0;
		var _g1 = SL.tempArray;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			SL.RecursiveOver(c,deck,meta,profile,random);
		}
	}
};
SL.CheckReward = function(rewardMeta,data,profile,random) {
	if(rewardMeta.Chance > 0 && random.randomInt(0,100) > rewardMeta.Chance) {
		return false;
	}
	if(!SL.CheckCondition(rewardMeta.Con,data,profile,random)) {
		return false;
	}
	return true;
};
SL.CheckCondition = function(con,data,profile,random) {
	if(con == null || con.length == 0) {
		return true;
	}
	var _g = 0;
	while(_g < con.length) {
		var c = con[_g];
		++_g;
		switch(c.Type) {
		case 1:
			var card = CSExtension.tryGet_String_CardData(profile.Cards,c.Id);
			if(card == null || card.CT < c.Count) {
				return false;
			}
			break;
		case 2:
			var item = CSExtension.tryGet_String_ItemData(profile.Items,c.Id);
			var count = item != null ? item.Count : 0;
			switch(c.Sign) {
			case "<":
				if(count >= c.Count) {
					return false;
				}
				break;
			case "<=":
				if(count > c.Count) {
					return false;
				}
				break;
			case "==":
				if(c.Count != count) {
					return false;
				}
				break;
			case ">":
				if(count <= c.Count) {
					return false;
				}
				break;
			case ">=":
				if(count < c.Count) {
					return false;
				}
				break;
			default:
				if(count == 0) {
					return false;
				}
			}
			break;
		case 6:
			var card1 = CSExtension.tryGet_String_CardMeta(data.Cards,c.Id);
			if(c.Invert == true && SL.CheckCard(card1,null,data,profile,random)) {
				return false;
			} else if(c.Invert == false && !SL.CheckCard(card1,null,data,profile,random)) {
				return false;
			}
			break;
		default:
		}
	}
	return true;
};
SL.ApplyReward = function(reward,meta,profile,random) {
	if(reward == null) {
		return;
	}
	var _g = 0;
	while(_g < reward.length) {
		var r = [reward[_g]];
		++_g;
		if(!SL.CheckReward(r[0],meta,profile,random)) {
			continue;
		}
		switch(r[0].Type) {
		case 2:
			var i = CSExtension.getOrCreate_String_ItemData(profile.Items,r[0].Id,(function(r) {
				return function(f) {
					return new ItemData(r[0].Id,0);
				};
			})(r));
			i.Count += r[0].Count;
			i.Count = i.Count < 0 ? 0 : i.Count;
			break;
		case 5:
			var m = CSExtension.tryGet_String_SkillMeta(meta.Skills,r[0].Id);
			profile.Skills[m.Slot] = r[0].Id;
			break;
		}
		profile.RewardEvents.push(r[0]);
	}
};
SL.GetCurrentCard = function(profile) {
	return profile.Deck[CSExtension.getCount_String(profile.Deck) - 1];
};
SL.CreateLeftRight = function(next,meta,profile,random) {
	var candidates = SL.GetTempArrayUnsafe();
	var _g = 0;
	while(_g < next.length) {
		var n = next[_g];
		++_g;
		var nc = CSExtension.tryGet_String_CardMeta(meta.Cards,n.Id);
		if(SL.CheckCard(nc,n,meta,profile,random)) {
			candidates.push(nc);
		}
	}
	if(candidates.length == 0) {
		profile.Left = null;
		profile.Right = null;
		return;
	} else if(candidates.length == 1) {
		profile.Left = candidates[0].Id;
		profile.Right = null;
		return;
	} else if(candidates.length == 2) {
		profile.Left = candidates[0].Id;
		profile.Right = candidates[1].Id;
		return;
	}
	candidates.sort(function(a,b) {
		return b.Pri - a.Pri;
	});
	var first = candidates[0].Pri;
	var _g = [];
	var _g1 = 0;
	var _g2 = candidates;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v.Pri == first) {
			_g.push(v);
		}
	}
	var filtered = _g;
	if(filtered.length == 1) {
		profile.Left = filtered[0].Id;
		HxOverrides.remove(candidates,filtered[0]);
	} else {
		var d = filtered[random.randomInt(0,filtered.length - 1)];
		profile.Left = d.Id;
		HxOverrides.remove(candidates,d);
	}
	candidates.sort(function(a,b) {
		return b.Pri - a.Pri;
	});
	var first = candidates[0].Pri;
	var _g = [];
	var _g1 = 0;
	var _g2 = candidates;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v.Pri == first) {
			_g.push(v);
		}
	}
	var filtered = _g;
	if(filtered.length == 1) {
		profile.Right = filtered[0].Id;
	} else {
		profile.Right = filtered[random.randomInt(0,filtered.length - 1)].Id;
	}
};
var CSExtension = function() { };
CSExtension.__name__ = true;
CSExtension.tryGet_String_GameRequest = function(_this,key) {
	var i = _this.h[key];
	if(i != null) {
		return i;
	}
	return null;
};
CSExtension.GetKeys_String_CardData = function(_this) {
	return new haxe_ds__$StringMap_StringMapKeyIterator(_this.h);
};
CSExtension.removeItem_String = function(_this,x) {
	HxOverrides.remove(_this,x);
};
CSExtension.find_TriggerMeta = function(_this,f) {
	return Lambda.find(_this,f);
};
CSExtension.tryGet_String_SkillMeta = function(_this,key) {
	var i = _this.h[key];
	if(i != null) {
		return i;
	}
	return null;
};
CSExtension.getOrCreate_String_CardData = function(_this,key,f) {
	var i = _this.h[key];
	if(i == null) {
		i = f(i);
		_this.h[key] = i;
	}
	return i;
};
CSExtension.getCount_String = function(_this) {
	return _this.length;
};
CSExtension.tryGet_String_ItemData = function(_this,key) {
	var i = _this.h[key];
	if(i != null) {
		return i;
	}
	return null;
};
CSExtension.tryGet_String_CardData = function(_this,key) {
	var i = _this.h[key];
	if(i != null) {
		return i;
	}
	return null;
};
CSExtension.tryGet_String_CardMeta = function(_this,key) {
	var i = _this.h[key];
	if(i != null) {
		return i;
	}
	return null;
};
CSExtension.getOrCreate_String_ItemData = function(_this,key,f) {
	var i = _this.h[key];
	if(i == null) {
		i = f(i);
		_this.h[key] = i;
	}
	return i;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var UInt = {};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Int32 = {};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_crypto_Sha1 = function() {
};
haxe_crypto_Sha1.__name__ = true;
haxe_crypto_Sha1.make = function(b) {
	var h = new haxe_crypto_Sha1().doEncode(haxe_crypto_Sha1.bytes2blks(b));
	var out = new haxe_io_Bytes(new ArrayBuffer(20));
	var p = 0;
	out.b[p++] = h[0] >>> 24;
	out.b[p++] = h[0] >> 16 & 255;
	out.b[p++] = h[0] >> 8 & 255;
	out.b[p++] = h[0] & 255;
	out.b[p++] = h[1] >>> 24;
	out.b[p++] = h[1] >> 16 & 255;
	out.b[p++] = h[1] >> 8 & 255;
	out.b[p++] = h[1] & 255;
	out.b[p++] = h[2] >>> 24;
	out.b[p++] = h[2] >> 16 & 255;
	out.b[p++] = h[2] >> 8 & 255;
	out.b[p++] = h[2] & 255;
	out.b[p++] = h[3] >>> 24;
	out.b[p++] = h[3] >> 16 & 255;
	out.b[p++] = h[3] >> 8 & 255;
	out.b[p++] = h[3] & 255;
	out.b[p++] = h[4] >>> 24;
	out.b[p++] = h[4] >> 16 & 255;
	out.b[p++] = h[4] >> 8 & 255;
	out.b[p++] = h[4] & 255;
	return out;
};
haxe_crypto_Sha1.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = [];
	var _g = 0;
	var _g1 = nblk * 16;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var _g = 0;
	var _g1 = b.length;
	while(_g < _g1) {
		var i = _g++;
		var p = i >> 2;
		blks[p] |= b.b[i] << 24 - ((i & 3) << 3);
	}
	var i = b.length;
	var p = i >> 2;
	blks[p] |= 128 << 24 - ((i & 3) << 3);
	blks[nblk * 16 - 1] = b.length * 8;
	return blks;
};
haxe_crypto_Sha1.prototype = {
	doEncode: function(x) {
		var w = [];
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var e = -1009589776;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			var olde = e;
			var j = 0;
			while(j < 80) {
				if(j < 16) {
					w[j] = x[i + j];
				} else {
					var num = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
					w[j] = num << 1 | num >>> 31;
				}
				var t = (a << 5 | a >>> 27) + this.ft(j,b,c,d) + e + w[j] + this.kt(j);
				e = d;
				d = c;
				c = b << 30 | b >>> 2;
				b = a;
				a = t;
				++j;
			}
			a += olda;
			b += oldb;
			c += oldc;
			d += oldd;
			e += olde;
			i += 16;
		}
		return [a,b,c,d,e];
	}
	,ft: function(t,b,c,d) {
		if(t < 20) {
			return b & c | ~b & d;
		}
		if(t < 40) {
			return b ^ c ^ d;
		}
		if(t < 60) {
			return b & c | b & d | c & d;
		}
		return b ^ c ^ d;
	}
	,kt: function(t) {
		if(t < 20) {
			return 1518500249;
		}
		if(t < 40) {
			return 1859775393;
		}
		if(t < 60) {
			return -1894007588;
		}
		return -899497514;
	}
	,__class__: haxe_crypto_Sha1
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = true;
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		return new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var seedyrng_GeneratorInterface = function() { };
seedyrng_GeneratorInterface.__name__ = true;
seedyrng_GeneratorInterface.__isInterface__ = true;
seedyrng_GeneratorInterface.prototype = {
	__class__: seedyrng_GeneratorInterface
};
var seedyrng_Random = function(seed,generator) {
	if(seed == null) {
		seed = new haxe__$Int64__$_$_$Int64(seedyrng_Random.randomSystemInt(),seedyrng_Random.randomSystemInt());
	}
	if(generator == null) {
		generator = new seedyrng_Xorshift128Plus();
	}
	this.generator = generator;
	this.set_seed(seed);
};
seedyrng_Random.__name__ = true;
seedyrng_Random.__interfaces__ = [seedyrng_GeneratorInterface];
seedyrng_Random.randomSystemInt = function() {
	var value = Std.random(255) << 24 | Std.random(255) << 16 | Std.random(255) << 8 | Std.random(255);
	return value;
};
seedyrng_Random.prototype = {
	get_seed: function() {
		return this.generator.get_seed();
	}
	,set_seed: function(value) {
		return this.generator.set_seed(value);
	}
	,get_state: function() {
		return this.generator.get_state();
	}
	,set_state: function(value) {
		return this.generator.set_state(value);
	}
	,get_usesAllBits: function() {
		return this.generator.get_usesAllBits();
	}
	,nextInt: function() {
		return this.generator.nextInt();
	}
	,nextFullInt: function() {
		if(this.generator.get_usesAllBits()) {
			return this.generator.nextInt();
		} else {
			var num1 = this.generator.nextInt();
			var num2 = this.generator.nextInt();
			num2 = num2 >>> 16 | num2 << 16;
			return num1 ^ num2;
		}
	}
	,setStringSeed: function(seed) {
		this.setBytesSeed(haxe_io_Bytes.ofString(seed));
	}
	,setBytesSeed: function(seed) {
		var hash = haxe_crypto_Sha1.make(seed);
		this.set_seed(hash.getInt64(0));
	}
	,random: function() {
		var upper = this.nextFullInt() & 2097151;
		var lower = this.nextFullInt();
		var lhs = upper * Math.pow(2,32);
		var floatNum = UInt.toFloat(lower) + lhs;
		var result = floatNum * Math.pow(2,-53);
		return result;
	}
	,randomInt: function(lower,upper) {
		return Math.floor(this.random() * (upper - lower + 1)) + lower;
	}
	,uniform: function(lower,upper) {
		return this.random() * (upper - lower) + lower;
	}
	,choice: function(array) {
		return array[this.randomInt(0,array.length - 1)];
	}
	,shuffle: function(array) {
		var _g = 0;
		var _g1 = array.length - 1;
		while(_g < _g1) {
			var index = _g++;
			var randIndex = this.randomInt(index,array.length - 1);
			var tempA = array[index];
			var tempB = array[randIndex];
			array[index] = tempB;
			array[randIndex] = tempA;
		}
	}
	,__class__: seedyrng_Random
};
var seedyrng_Xorshift128Plus = function() {
	this._currentAvailable = false;
	this.set_seed(new haxe__$Int64__$_$_$Int64(0,1));
};
seedyrng_Xorshift128Plus.__name__ = true;
seedyrng_Xorshift128Plus.__interfaces__ = [seedyrng_GeneratorInterface];
seedyrng_Xorshift128Plus.prototype = {
	get_usesAllBits: function() {
		return false;
	}
	,get_seed: function() {
		return this._seed;
	}
	,set_seed: function(value) {
		var b_high = 0;
		var b_low = 0;
		if(!(value.high != b_high || value.low != b_low)) {
			value = new haxe__$Int64__$_$_$Int64(0,1);
		}
		this._seed = value;
		this._state0 = value;
		this._state1 = seedyrng_Xorshift128Plus.SEED_1;
		this._currentAvailable = false;
		return value;
	}
	,get_state: function() {
		var bytes = new haxe_io_Bytes(new ArrayBuffer(33));
		bytes.setInt64(0,this._seed);
		bytes.setInt64(8,this._state0);
		bytes.setInt64(16,this._state1);
		bytes.b[24] = this._currentAvailable ? 1 : 0;
		if(this._currentAvailable) {
			bytes.setInt64(25,this._current);
		}
		return bytes;
	}
	,set_state: function(value) {
		if(value.length != 33) {
			throw haxe_Exception.thrown("Wrong state size " + value.length);
		}
		this._seed = value.getInt64(0);
		this._state0 = value.getInt64(8);
		this._state1 = value.getInt64(16);
		this._currentAvailable = value.b[24] == 1;
		if(this._currentAvailable) {
			this._current = value.getInt64(25);
		}
		return value;
	}
	,stepNext: function() {
		var x = this._state0;
		var y = this._state1;
		this._state0 = y;
		var b = 23;
		b &= 63;
		var b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(x.high,x.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(x.high << b | x.low >>> 32 - b,x.low << b) : new haxe__$Int64__$_$_$Int64(x.low << b - 32,0);
		x = new haxe__$Int64__$_$_$Int64(x.high ^ b1.high,x.low ^ b1.low);
		var a_high = x.high ^ y.high;
		var a_low = x.low ^ y.low;
		var b = 17;
		b &= 63;
		var b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(x.high,x.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(x.high >> b,x.high << 32 - b | x.low >>> b) : new haxe__$Int64__$_$_$Int64(x.high >> 31,x.high >> b - 32);
		var a_high1 = a_high ^ b1.high;
		var a_low1 = a_low ^ b1.low;
		var b = 26;
		b &= 63;
		var b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(y.high,y.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(y.high >> b,y.high << 32 - b | y.low >>> b) : new haxe__$Int64__$_$_$Int64(y.high >> 31,y.high >> b - 32);
		this._state1 = new haxe__$Int64__$_$_$Int64(a_high1 ^ b1.high,a_low1 ^ b1.low);
		var a = this._state1;
		var high = a.high + y.high | 0;
		var low = a.low + y.low | 0;
		if(haxe_Int32.ucompare(low,a.low) < 0) {
			var ret = high++;
			high = high | 0;
		}
		this._current = new haxe__$Int64__$_$_$Int64(high,low);
	}
	,nextInt: function() {
		if(this._currentAvailable) {
			this._currentAvailable = false;
			return this._current.low;
		} else {
			this.stepNext();
			this._currentAvailable = true;
			return this._current.high;
		}
	}
	,__class__: seedyrng_Xorshift128Plus
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
TriggerMeta.CARD = 1;
TriggerMeta.ITEM = 2;
TriggerMeta.ALWAYS = 10;
TriggerMeta.SWIPE = 11;
TriggerMeta.START_GAME = 12;
TriggerMeta.EVENT = 13;
TriggerMeta.CHANGE_LOCATION = 14;
TriggerMeta.REROLL = 15;
ConditionMeta.ANY = 0;
ConditionMeta.CARD = 1;
ConditionMeta.ITEM = 2;
ConditionMeta.LOCATION = 3;
ConditionMeta.QUEST = 4;
ConditionMeta.SKILL = 5;
ConditionMeta.CARD_COND = 6;
CardMeta.LEFT = 0;
CardMeta.RIGHT = 1;
CardMeta.ACTIVATED = 0;
CardMeta.EXECUTED = 1;
CardMeta.TYPE_CARD = 0;
CardMeta.TYPE_SKILL = 1;
CardMeta.TYPE_QUEST = 2;
CardMeta.TYPE_GROUP = 3;
CardMeta.QUEST_ACTIVE = 0;
CardMeta.QUEST_SUCCESS = 1;
CardMeta.QUEST_FAIL = 2;
seedyrng_Xorshift128Plus.PARAMETER_A = 23;
seedyrng_Xorshift128Plus.PARAMETER_B = 17;
seedyrng_Xorshift128Plus.PARAMETER_C = 26;
seedyrng_Xorshift128Plus.SEED_1 = new haxe__$Int64__$_$_$Int64(842650776,685298713);
SL.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
